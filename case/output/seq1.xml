<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int OBJECT= 3;
const int MESSAGE=7;
const int N=MESSAGE+OBJECT;
typedef int[0,N] id_t;
typedef int[0,OBJECT-1] obj_t;
typedef int[OBJECT,N-1] msg_t;
typedef int[-1, N*N-1] message_t;
urgent broadcast chan msg[N*N];
 

double mean_table[OBJECT][N] ={
   {0.0,0.0,0.0,0.0,4.6,0.0,0.0,0.0,0.0,0.0},
   {0.0,0.0,0.0,5.3,0.0,0.0,0.0,0.0,0.0,7.1},
   {0.0,0.0,0.0,0.0,0.0,6.1,4.5,9.3,2.1,0.0}
};
double deviation_table[OBJECT][N] = {
   {0.0,0.0,0.0,0.0,5.2,0.0,0.0,0.0,0.0,0.0},
   {0.0,0.0,0.0,1.6,0.0,0.0,0.0,0.0,0.0,4.2},
   {0.0,0.0,0.0,0.0,0.0,8.1,3.2,8.6,3.2,0.0}
};
double MsgMean_table[N]={
  0.0,0.0,0.0,0.0,0.0,9.0,0.0,0.0,2.3,0.0
};
double MsgDeviation_table[N]={
  0.0,0.0,0.0,0.0,0.0,2.6,0.0,0.0,6.6,0.0
};
int encode_msg(id_t send_id,id_t receive_id)
{
   return N * send_id + receive_id;
}
int Connected[OBJECT][MESSAGE]={
  {0,0,1,0,0,-1,-1},
  {2,-2,0,2,-1,-1,-1},
  {-1,-1,-1,-1,-1,-1,-1} 
};
message_t Send[OBJECT][MESSAGE]={   
  {encode_msg(0,4),-1,-1,-1,-1,-1,-1},
  {encode_msg(1,3),encode_msg(1,9),-1,-1,-1,-1,-1},
  {encode_msg(2,8),encode_msg(2,5),encode_msg(2,7),encode_msg(2,6),-1,-1,-1}
};
message_t Msg[MESSAGE]=
{
encode_msg(8,1),encode_msg(5,1),encode_msg(3,0),encode_msg(4,1),encode_msg(9,2),encode_msg(7,1),encode_msg(6,1)
};
 

void do_func(){
    
}

double normal_distribution(double mean, double deviation)
{
	double x1, y1, z1;
	x1 = random(1.0);
	y1 = random(1.0);
	z1 = ((deviation * pow(((-2.0) * ln(x1)), 0.5) * cos(2.0 * 3.14 * y1)) + mean);
	if(z1 &lt; 0)
	{
		z1 = 0;
	}
	return z1;
}
 

</declaration>
	<template>
		<name x="5" y="5">Object</name>
		<parameter>const obj_t obj_id</parameter>
		<declaration>// Place local declarations here.
clock x;
double time;
int flag=-1;
message_t send_msg=-1;
int exe_num=0;
int send_num=0;
void initialize(){
		flag=Connected[obj_id][exe_num];
		if(Connected[obj_id][exe_num]==0)
 		{  
			send_msg=Send[obj_id][send_num];
	 		send_num++;
		}
			}
void exe_send( ){
	if(exe_num!=MESSAGE-1){		
        ++exe_num;
		flag=Connected[obj_id][exe_num];
	    if(Connected[obj_id][exe_num]==0)
		{
			send_msg=Send[obj_id][send_num];
			send_num++;
		}
	}
	else
		flag=-1;
}
void exe_rec(){
	if(flag==0){
		 if(exe_num!=MESSAGE-1){
			++exe_num;
			flag=Connected[obj_id][exe_num];
			if(Connected[obj_id][exe_num]==0){
				send_msg=Send[obj_id][send_num];
			send_num++;
			}
		}
		else
			flag=-1;
	}


}
double running_time(id_t id){
	 if(send_msg!=-1)
  {
	   int d=send_msg % N;
    return normal_distribution(mean_table[id][d], deviation_table[id][d]); 
  }
return 0.0;
}
</declaration>
		<location id="id0" x="-25" y="-408">
			<name x="-35" y="-442">Sending</name>
		</location>
		<location id="id1" x="178" y="-255">
			<name x="168" y="-289">Wait</name>
		</location>
		<location id="id2" x="-34" y="-255">
			<committed/>
		</location>
		<location id="id3" x="-416" y="-535">
			<name x="-426" y="-569">Recieving</name>
		</location>
		<location id="id4" x="-416" y="-255">
			<committed/>
		</location>
		<location id="id5" x="-527" y="-255">
			<name x="-537" y="-289">Init</name>
			<committed/>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-340" y="-255">flag&lt;=0</label>
			<nail x="-221" y="-255"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="select" x="-170" y="-161">e : message_t</label>
			<label kind="guard" x="-170" y="-144">flag&gt;0&amp;&amp;e % N== obj_id</label>
			<label kind="synchronisation" x="-170" y="-127">msg[e]?</label>
			<label kind="assignment" x="-170" y="-102">flag--,exe_rec()</label>
			<nail x="170" y="-102"/>
			<nail x="-416" y="-102"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-144" y="-382">flag==0</label>
			<label kind="assignment" x="-195" y="-340">x=0,
 time=running_time(obj_id)</label>
			<nail x="-68" y="-348"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="34" y="-357">msg[send_msg]!</label>
			<label kind="assignment" x="25" y="-331">exe_send()</label>
			<nail x="17" y="-340"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="select" x="-315" y="-502">e : message_t</label>
			<label kind="guard" x="-315" y="-485">e % N== obj_id</label>
			<label kind="synchronisation" x="-315" y="-468">msg[e]?</label>
			<label kind="assignment" x="-306" y="-433">flag--,exe_rec()</label>
			<nail x="-323" y="-408"/>
			<nail x="-366" y="-323"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="34" y="-246">flag!=0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-629" y="-433">flag&gt;0</label>
			<nail x="-518" y="-408"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="assignment" x="-509" y="-255">initialize()</label>
		</transition>
	</template>
	<template>
		<name>Message</name>
		<parameter>const msg_t msg_id</parameter>
		<declaration>clock x;
double time;
message_t send_msg=-1;
void initialize(){
		for(i:int[0,MESSAGE-1])
		{
       if(Msg[i]/N==msg_id)
  		send_msg=Msg[i];
  	 }
}
double running_time(id_t id){

    return normal_distribution( MsgMean_table[id], MsgDeviation_table[id]); 

}
</declaration>
		<location id="id6" x="323" y="-17">
			<name x="313" y="-51">End</name>
		</location>
		<location id="id7" x="-8" y="-17">
			<name x="-18" y="-51">Sending</name>
			<label kind="invariant" x="-18" y="0">x&lt;=time</label>
		</location>
		<location id="id8" x="-272" y="-17">
			<name x="-282" y="-51">Recieving</name>
		</location>
		<location id="id9" x="-442" y="-17">
			<name x="-452" y="-51">Init</name>
			<committed/>
		</location>
		<init ref="id9"/>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="34" y="-51">x&gt;=time</label>
			<label kind="synchronisation" x="68" y="-42">msg[send_msg]!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="select" x="-195" y="-76">e : message_t</label>
			<label kind="guard" x="-195" y="-59">e % N== msg_id</label>
			<label kind="synchronisation" x="-195" y="-42">msg[e]?</label>
			<label kind="assignment" x="-254" y="-17">x=0,time=running_time(msg_id)</label>
			<nail x="-119" y="-17"/>
			<nail x="-161" y="-17"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="assignment" x="-424" y="-17">initialize()</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
// List one or more processes to be composed into a system.
system Object,Message;
</system>
	<queries>
		<query>
			<formula>Pr[&lt;=25](&lt;&gt;(Object(2).Wait))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=25](&lt;&gt;(Object(1).Wait))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=25](&lt;&gt;(Object(0).Wait))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt;(Message(4).End))
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=100](&lt;&gt;(Message(3).End))
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
